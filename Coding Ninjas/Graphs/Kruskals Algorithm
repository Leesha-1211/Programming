#include <iostream>
#include<algorithm>
using namespace std;

class Edge{
    public:
    int source;
    int dest;
    int weight;
};

int findparent(int v,int *parent){
   
    if(parent[v]==v){
        return v;
    }
    return findparent(parent[v],parent);
}

bool compare(Edge e1,Edge e2){
    return e1.weight<e2.weight;
}
void krushkals(Edge *input,int v,int E){
     sort(input,input+E,compare);
 Edge *output= new Edge[v-1];
 int *parent= new int[v];
 for (int i = 0; i < v; i++) {
   parent[i] = i;
 }

 int count=0;
 int i=0;
 while(count!=v-1){
   
  int sourceparent = findparent(input[i].source,parent);
  int destparent=findparent(input[i].dest,parent);
   if(sourceparent!=destparent){
       output[count]=input[i];
       count++;
       parent[sourceparent]=destparent;
   }
i++;
}
  for(int i=0;i<v-1;i++){
      cout<<min(output[i].source,output[i].dest)<<" "<<max(output[i].source,output[i].dest)<<" "<<output[i].weight<<"\n";
  }
 }

int main() {
   int v,E;
   cin>>v>>E;
   Edge *input=new Edge[E];
 
   for(int i=0;i<E;i++){
       int s,d,w;
         cin>>s>>d>>w;
       input[i].source=s;
       input[i].dest=d;
       input[i].weight=w;
   }

  krushkals(input,v,E);
}
