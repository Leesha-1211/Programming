class Solution {
	 long merge(vector <int> &arr, int left, int mid, int right) {
    int i = left, j = mid, k = 0;
    long long invCount = 0;
    int temp[arr.size()];

    while ((i < mid) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k] = arr[i];
            ++k;
            ++i;
        } else {
            temp[k] = arr[j];
            invCount += (mid - i);
            ++k;
            ++j;
        }
    }

    while (i < mid) {
        temp[k] = arr[i];
        ++k;
        ++i;
    }

    while (j <= right) {
        temp[k] = arr[j];
        ++k;
        ++j;
    }

    for (i = left, k = 0; i <= right; i++, k++) {
        arr[i] = temp[k];
    }

    return invCount;
}
long mergeSort(vector <int> &arr, int left, int right) {
    long invCount = 0;

    if (right > left) {
        int mid = (right + left) / 2;
        invCount = mergeSort(arr, left, mid);
        invCount += mergeSort(arr, mid + 1, right);
        invCount += merge(arr, left, mid + 1, right);
    }
    return invCount;
}
public:

	long inversionCount(vector<int>& arr) {
		int n=arr.size();
		return mergeSort(arr, 0, n - 1);
	}
};
